#PARTA1
import time
def Normalize(inp_list):

    for i in range(0,len(inp_list)-1):

        inp_list[i] = (inp_list[i] - MinList(inp_list)) / (MaxList(inp_list)) - (MinList(inp_list))
    return inp_list
def MinList(inp_list):
    min= inp_list[0]
    for i in inp_list:
        if i<min:
            min = i
    return min
def MaxList(inp_list):
    max = inp_list[0]
    for i in inp_list:
        if i > max:
            max = i
    return max
#PARTA2
class Linked_list():
    def __init__(self):
        self.next= None
        self.len=0
    def add_at_start(self,val):
        p=self
        tmp = p.next
        p.next = Node(val)
        p.next.next=tmp
        self.len +=1
    def __len__(self):
        return self.len
    def __getitem__(self,loc):
        assert 0 <= loc < len(self)
        p = self.next
        for i in range(0,loc):
            p = p.next
        return p.value
def Normalize2(inp_list):

    for i in range(0,len(inp_list)-1):
        print(i)
        inp_list[i] = (inp_list[i] - MinList(inp_list)) / (MaxList(inp_list) - MinList(inp_list))
    return inp_list
def MinList2(inp_list):
    min= inp_list[0]
    for i in inp_list:
        if i<min:
            min = i
    return min
def MaxList2(inp_list):
    max = inp_list[0]
    for i in inp_list:
        if i > max:
            max = i
class Node():
    def __init__(self,val):
        self.value = val
        self.next = None

a=[0,2,4,67,88,4422,657,2,545,768,1,23]
#PARTB
time_list = []
time_start = time.time()
print(Normalize(a))
time_end = time.time()
time_taken = time_end - time_start
time_list.append(time_taken)
print(time_list)
#PARTC
#There is only one for  function so theBigO is (n) all of the Normalize,MinList,MaxList  functions.
